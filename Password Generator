import random
import string
import tkinter as tk
from tkinter import messagebox

# Function to generate a random password
def generate_password(length):
    chars = string.ascii_letters + string.digits + string.punctuation
    password = ''.join(random.choice(chars) for _ in range(length))
    return password

# Function to generate and display the password
def generate_password_click():
    password_length_str = length_entry.get()
    if not password_length_str:
        messagebox.showerror("Invalid Input", "Please enter a password length.")
        return

    try:
        password_length = int(password_length_str)
    except ValueError:
        messagebox.showerror("Invalid Input", "Please enter a valid number for password length.")
        return
    
    generated_password = generate_password(password_length)
    
    password_label.config(text=f"Generated Password: {generated_password}")

# Function to reset the generated password with a new one
def reset_password():
    generate_password_click()

# Create the main window with a compact size
window = tk.Tk()
window.title("Password Generator")
window.geometry("300x300")  # Adjust the size here

# Widgets for user input
password_length_label = tk.Label(window, text="Password Length:")
length_entry = tk.Entry(window)

generate_button = tk.Button(window, text="Generate Password", command=generate_password_click)
reset_button = tk.Button(window, text="Reset Password", command=reset_password)
reset_length_button = tk.Button(window, text="Reset Length", command=lambda: length_entry.delete(0, tk.END))

password_label = tk.Label(window, text="")

# Layout widgets with reduced spacing
password_length_label.pack()
length_entry.pack()
generate_button.pack()
reset_button.pack()
reset_length_button.pack()
password_label.pack()

# Start the application
window.mainloop()
